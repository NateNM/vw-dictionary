{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, withModifiers as _withModifiers, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\"\n}, \"Get definition\", -1 /* HOISTED */);\nconst _hoisted_2 = {\n  key: 0\n};\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"form\", {\n    onSubmit: _cache[1] || (_cache[1] = _withModifiers($event => _ctx.getDefinitions(), [\"prevent\"]))\n  }, [_withDirectives(_createElementVNode(\"input\", {\n    placeholder: \"myWord\",\n    type: \"text\",\n    id: \"word\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.word = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.word]]), _hoisted_1], 32 /* NEED_HYDRATION */), !_ctx.validQuiery ? (_openBlock(), _createElementBlock(\"p\", _hoisted_2, \"Error: The word you are searching for does not exist. Please try a differnt word.\")) : _createCommentVNode(\"v-if\", true), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.definitionArray, definition => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: definition\n    }, [_createElementVNode(\"div\", null, _toDisplayString(definition), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","type","key","_createElementBlock","_Fragment","onSubmit","_cache","_withModifiers","$event","_ctx","getDefinitions","placeholder","id","word","_hoisted_1","validQuiery","_hoisted_2","_createCommentVNode","_renderList","definitionArray","definition","_toDisplayString"],"sources":["/home/nathaniel/Projects/vw-dictionary/src/App.vue"],"sourcesContent":["<template>\n  <form @submit.prevent=\"getDefinitions()\">\n    <input placeholder=\"myWord\" type=\"text\" id=\"word\" v-model=\"word\">\n    <button type=\"submit\">Get definition</button>\n  </form>\n  <p v-if=\"!validQuiery\">Error: The word you are searching for does not exist. Please try a differnt word.</p>\n  <div v-for=\"definition in definitionArray\" :key=\"definition\">\n    <div>{{ definition }}</div>\n  </div>\n</template>\n\n<script>\nimport { ref } from \"vue\";\nimport axios from \"axios\";\n\nexport default {\n  name: 'App',\n  setup() {\n    let validQuery = ref(true)\n    const definitionArray = ref([])\n    const word = ref(\"\");\n    async function getDefinitions() {\n      console.log(word.value);\n\n      try{\n\n        const url =  \"https://api.dictionaryapi.dev/api/v2/entries/en/\" + word.value;\n        const { data } = await axios.get(url);\n        console.log(data);\n        data.forEach(({ meanings }) =>\n          meanings.forEach(({ definitions }) =>\n            definitions.forEach(({ definition }) => {\n              if (typeof definition === \"string\") {\n                definitionArray.value.push(definition)\n                console.log(definition);\n              }\n            })\n          )\n        );\n      }\n    }\n\n    return { word, getDefinitions, definitionArray, validQuery };\n  }\n}\n</script>\n\n<style>\n\n</style>\n"],"mappings":";gCAGIA,mBAAA,CAA6C;EAArCC,IAAI,EAAC;AAAQ,GAAC,gBAAc;;EAHxCC,GAAA;AAAA;;uBAAAC,mBAAA,CAAAC,SAAA,SACEJ,mBAAA,CAGO;IAHAK,QAAM,EAAAC,MAAA,QAAAA,MAAA,MADfC,cAAA,CAAAC,MAAA,IACyBC,IAAA,CAAAC,cAAc;sBACnCV,mBAAA,CAAiE;IAA1DW,WAAW,EAAC,QAAQ;IAACV,IAAI,EAAC,MAAM;IAACW,EAAE,EAAC,MAAM;IAFrD,uBAAAN,MAAA,QAAAA,MAAA,MAAAE,MAAA,IAE+DC,IAAA,CAAAI,IAAI,GAAAL,MAAA;iDAAJC,IAAA,CAAAI,IAAI,E,GAC/DC,UAA6C,C,6BAErCL,IAAA,CAAAM,WAAW,I,cAArBZ,mBAAA,CAA4G,KAL9Ga,UAAA,EAKyB,mFAAiF,KAL1GC,mBAAA,iB,kBAMEd,mBAAA,CAEMC,SAAA,QARRc,WAAA,CAM4BT,IAAA,CAAAU,eAAe,EAA7BC,UAAU;yBAAtBjB,mBAAA,CAEM;MAFsCD,GAAG,EAAEkB;IAAU,IACzDpB,mBAAA,CAA2B,aAAAqB,gBAAA,CAAnBD,UAAU,iB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}